1..5
# TAP results for tests/unit/test_utils.py
not ok 1 tests/unit/test_utils.py::TestUtils.test_calculate_annualized_return
# self = <test_utils.TestUtils testMethod=test_calculate_annualized_return>
# 
#     def test_calculate_annualized_return(self):
#         """Test calculation of annualized returns"""
#         # Test with different scenarios
# >       self.assertAlmostEqual(calculate_annualized_return(5.0, 30), 61.02, delta=0.1)
# E       AssertionError: 60.83333333333333 != 61.02 within 0.1 delta (0.18666666666667453 difference)
# 
# unit/test_utils.py:22: AssertionError
# --- Captured Log ---
# 
# --- Captured Out ---
# 
# --- Captured Err ---
#
not ok 2 tests/unit/test_utils.py::TestUtils.test_format_currency
# self = <test_utils.TestUtils testMethod=test_format_currency>
# 
#     def test_format_currency(self):
#         """Test currency formatting function"""
#         self.assertEqual(format_currency(1234.5678), "$1,234.57")
#         self.assertEqual(format_currency(0), "$0.00")
# >       self.assertEqual(format_currency(-1234.56), "-$1,234.56")
# E       AssertionError: '$-1,234.56' != '-$1,234.56'
# E       - $-1,234.56
# E       ?  -
# E       + -$1,234.56
# E       ? +
# 
# unit/test_utils.py:34: AssertionError
# --- Captured Log ---
# 
# --- Captured Out ---
# 
# --- Captured Err ---
#
ok 3 tests/unit/test_utils.py::TestUtils.test_format_percentage
not ok 4 tests/unit/test_utils.py::TestUtils.test_option_symbol_formatting
# self = <test_utils.TestUtils testMethod=test_option_symbol_formatting>
# 
#     def test_option_symbol_formatting(self):
#         """Test OCC option symbol formatting"""
#         # Standard case
# >       self.assertEqual(
#             format_option_symbol("AAPL", "2023-06-16", "C", 150.0),
#             "AAPL230616C00150000"
#         )
# E       AssertionError: 'AAPL  230616C00150000' != 'AAPL230616C00150000'
# E       - AAPL  230616C00150000
# E       ?     --
# E       + AAPL230616C00150000
# 
# unit/test_utils.py:45: AssertionError
# --- Captured Log ---
# 
# --- Captured Out ---
# 
# --- Captured Err ---
#
not ok 5 tests/unit/test_utils.py::TestUtils.test_parse_option_symbol
# self = <test_utils.TestUtils testMethod=test_parse_option_symbol>
# 
#     def test_parse_option_symbol(self):
#         """Test parsing OCC option symbols"""
#         # Standard call option
#         result = parse_option_symbol("AAPL230616C00150000")
# >       self.assertEqual(result["symbol"], "AAPL")
# E       TypeError: 'NoneType' object is not subscriptable
# 
# unit/test_utils.py:66: TypeError
# --- Captured Log ---
# [1m[31mERROR   [0m utils:utils.py:456 Error parsing option symbol AAPL230616C00150000: invalid literal for int() with base 10: 'C0'
# --- Captured Out ---
# 
# --- Captured Err ---
# ERROR:utils:Error parsing option symbol AAPL230616C00150000: invalid literal for int() with base 10: 'C0'
